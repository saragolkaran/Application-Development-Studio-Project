import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
let CalendarSchedulerEventActionsComponent = class CalendarSchedulerEventActionsComponent {
    constructor() {
        this.actions = [];
    }
    ngOnInit() {
        this.setupActions();
    }
    ngOnChanges(changes) {
        if (changes.event) {
            this.setupActions();
        }
    }
    setupActions() {
        this.actions = this.event.isCancelled
            ? this.event.actions.filter((a) => !a.when || a.when === 'cancelled')
            : this.event.isDisabled
                ? this.event.actions.filter((a) => !a.when || a.when === 'disabled')
                : this.event.actions.filter((a) => !a.when || a.when === 'enabled');
    }
    /**
     * @hidden
     */
    onActionClick(mouseEvent, action, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        action.onClick(event);
    }
};
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventActionsComponent.prototype, "event", void 0);
CalendarSchedulerEventActionsComponent = tslib_1.__decorate([
    Component({
        selector: 'calendar-scheduler-event-actions',
        template: `
        <span *ngIf="event.actions"
            class="cal-scheduler-event-actions">
            <a
                class="cal-scheduler-event-action"
                href="javascript:;"
                *ngFor="let action of actions"
                (mwlClick)="onActionClick($event, action, event)"
                [ngClass]="action.cssClass"
                [innerHtml]="action.label"
                [title]="action.title">
            </a>
        </span>
    `,
        host: {
            'class': 'cal-scheduler-event-actions-container'
        }
    })
], CalendarSchedulerEventActionsComponent);
export { CalendarSchedulerEventActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1jYWxlbmRhci1zY2hlZHVsZXIvIiwic291cmNlcyI6WyJtb2R1bGVzL3NjaGVkdWxlci9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQTBCbkYsSUFBYSxzQ0FBc0MsR0FBbkQsTUFBYSxzQ0FBc0M7SUFwQm5EO1FBd0JXLFlBQU8sR0FBbUMsRUFBRSxDQUFDO0lBOEJ4RCxDQUFDO0lBNUJVLFFBQVE7UUFDWCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUNyQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDZixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRU8sWUFBWTtRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVztZQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBK0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDO1lBQ25HLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVU7Z0JBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUErQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7Z0JBQ2xHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUErQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhLENBQUMsVUFBc0IsRUFBRSxNQUFvQyxFQUFFLEtBQTZCO1FBQ3JHLElBQUksVUFBVSxDQUFDLGVBQWUsRUFBRTtZQUM1QixVQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDSixDQUFBO0FBaENZO0lBQVIsS0FBSyxFQUFFO3FFQUErQjtBQUY5QixzQ0FBc0M7SUFwQmxELFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxrQ0FBa0M7UUFDNUMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7O0tBYVQ7UUFDRCxJQUFJLEVBQUU7WUFDRixPQUFPLEVBQUUsdUNBQXVDO1NBQ25EO0tBQ0osQ0FBQztHQUNXLHNDQUFzQyxDQWtDbEQ7U0FsQ1ksc0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uXHJcbn0gZnJvbSAnLi9tb2RlbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPHNwYW4gKm5nSWY9XCJldmVudC5hY3Rpb25zXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJjYWwtc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnNcIj5cclxuICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgIGNsYXNzPVwiY2FsLXNjaGVkdWxlci1ldmVudC1hY3Rpb25cIlxyXG4gICAgICAgICAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6O1wiXHJcbiAgICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgYWN0aW9uIG9mIGFjdGlvbnNcIlxyXG4gICAgICAgICAgICAgICAgKG13bENsaWNrKT1cIm9uQWN0aW9uQ2xpY2soJGV2ZW50LCBhY3Rpb24sIGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJhY3Rpb24uY3NzQ2xhc3NcIlxyXG4gICAgICAgICAgICAgICAgW2lubmVySHRtbF09XCJhY3Rpb24ubGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgW3RpdGxlXT1cImFjdGlvbi50aXRsZVwiPlxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgYCxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnY2xhc3MnOiAnY2FsLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zLWNvbnRhaW5lcidcclxuICAgIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIEBJbnB1dCgpIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50O1xyXG5cclxuICAgIHB1YmxpYyBhY3Rpb25zOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXR1cEFjdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLmV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBBY3Rpb25zKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBBY3Rpb25zKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHRoaXMuZXZlbnQuaXNDYW5jZWxsZWRcclxuICAgICAgICAgICAgPyB0aGlzLmV2ZW50LmFjdGlvbnMuZmlsdGVyKChhOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uKSA9PiAhYS53aGVuIHx8IGEud2hlbiA9PT0gJ2NhbmNlbGxlZCcpXHJcbiAgICAgICAgICAgIDogdGhpcy5ldmVudC5pc0Rpc2FibGVkXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuZXZlbnQuYWN0aW9ucy5maWx0ZXIoKGE6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb24pID0+ICFhLndoZW4gfHwgYS53aGVuID09PSAnZGlzYWJsZWQnKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLmV2ZW50LmFjdGlvbnMuZmlsdGVyKChhOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uKSA9PiAhYS53aGVuIHx8IGEud2hlbiA9PT0gJ2VuYWJsZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgb25BY3Rpb25DbGljayhtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBhY3Rpb246IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb24sIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhY3Rpb24ub25DbGljayhldmVudCk7XHJcbiAgICB9XHJcbn1cclxuIl19