import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, TemplateRef, OnInit, ElementRef } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
const moment = momentImported;
let CalendarSchedulerEventComponent = class CalendarSchedulerEventComponent {
    constructor(hostElement) {
        this.hostElement = hostElement;
        this.showContent = true;
        this.showActions = true;
        this.showStatus = true;
        this.eventClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || `${this.event.event.title}, ${this.event.event.content ? `${this.event.event.content},` : null} ${moment(this.event.event.start).format('dddd L, LT')}`;
    }
    onMouseEnter() {
        // Maybe do something
    }
    onMouseLeave() {
        // Maybe do something
    }
    /**
     * @hidden
     */
    onEventClick(mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    }
};
CalendarSchedulerEventComponent.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "day", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "event", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "container", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "showContent", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "showActions", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "showStatus", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "customTemplate", void 0);
tslib_1.__decorate([
    Input()
], CalendarSchedulerEventComponent.prototype, "eventTitleTemplate", void 0);
tslib_1.__decorate([
    Output()
], CalendarSchedulerEventComponent.prototype, "eventClicked", void 0);
CalendarSchedulerEventComponent = tslib_1.__decorate([
    Component({
        selector: 'calendar-scheduler-event',
        template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-event"
                [title]="title"
                [style.max-width.px]="container.clientWidth - 4"
                [class.cal-cancelled]="event.event.isCancelled"
                [class.cal-disabled]="event.event.isDisabled"
                [class.cal-not-clickable]="!event.event.isClickable"
                [class.cal-draggable]="event.event.draggable"
                [class.cal-starts-before-day]="event.startsBeforeDay"
                [class.cal-ends-after-day]="event.endsAfterDay"
                [style.backgroundColor]="event.event.color?.secondary"
                [style.borderColor]="event.event.color?.primary"
                (mwlClick)="onEventClick($event, event.event)"
                (mouseenter)="onMouseEnter()"
                (mouseleave)="onMouseLeave()">
                <calendar-scheduler-event-title
                    view="week"
                    [event]="event.event"
                    [showStatus]="showStatus"
                    [showContent]="showContent"
                    [showActions]="showActions"
                    [customTemplate]="eventTitleTemplate">
                </calendar-scheduler-event-title>
                <calendar-scheduler-event-content
                    *ngIf="showContent"
                    [event]="event.event"
                    [eventContainer]="container">
                </calendar-scheduler-event-content>
                <calendar-scheduler-event-actions
                    *ngIf="showActions && showContent && (event.event.isClickable || event.event.isDisabled)"
                    [event]="event.event">
                </calendar-scheduler-event-actions>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                event: event,
                showContent: showContent,
                showActions: showActions,
                showStatus: showStatus,
                eventTitleTemplate: eventTitleTemplate,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
        host: {
            '[style.height.%]': '100'
        }
    })
], CalendarSchedulerEventComponent);
export { CalendarSchedulerEventComponent };
//# sourceMappingURL=data:application/json;base64,