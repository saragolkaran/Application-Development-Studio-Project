import { CalendarSchedulerEvent, SchedulerViewDay, SchedulerViewEvent, SchedulerView } from '../models';
import { WeekViewHour } from 'calendar-utils';
import { DateAdapter } from 'angular-calendar';
export declare enum DAYS_OF_WEEK {
    SUNDAY = 0,
    MONDAY = 1,
    TUESDAY = 2,
    WEDNESDAY = 3,
    THURSDAY = 4,
    FRIDAY = 5,
    SATURDAY = 6
}
export declare const DAYS_IN_WEEK: number;
export declare const HOURS_IN_DAY: number;
export declare const MINUTES_IN_HOUR: number;
export declare const SECONDS_IN_DAY: number;
export declare const DEFAULT_HOUR_SEGMENT_HEIGHT_PX = 40;
export declare const DEFAULT_EVENT_WIDTH = 1;
export declare const DEFAULT_HOUR_SEGMENTS = 2;
export interface Time {
    hour: number;
    minute: number;
}
export interface GetSchedulerViewHourGridArgs {
    viewDate: Date;
    hourSegments: number;
    dayStart: Time;
    dayEnd: Time;
}
export declare function getSchedulerViewHourGrid(dateAdapter: DateAdapter, { viewDate, hourSegments, dayStart, dayEnd }: GetSchedulerViewHourGridArgs): WeekViewHour[];
export interface GetSchedulerViewArgs {
    events?: CalendarSchedulerEvent[];
    viewDate: Date;
    viewDays: number;
    hourSegments: 1 | 2 | 4 | 6;
    weekStartsOn: number;
    startsWithToday: boolean;
    dayStart: Time;
    dayEnd: Time;
    weekendDays?: number[];
    excluded?: number[];
    eventWidth: number;
    hourSegmentHeight: number;
    logEnabled?: boolean;
}
export declare function getSchedulerView(dateAdapter: DateAdapter, { events, viewDate, viewDays, weekStartsOn, startsWithToday, excluded, hourSegments, dayStart, dayEnd, weekendDays, hourSegmentHeight, eventWidth, logEnabled, }: GetSchedulerViewArgs): SchedulerView;
export interface GetSchedulerViewDaysArgs {
    viewDate: Date;
    viewDays: number;
    weekStartsOn: number;
    startsWithToday: boolean;
    excluded?: number[];
    weekendDays?: number[];
}
export declare function getSchedulerViewDays(dateAdapter: DateAdapter, { viewDate, viewDays, weekStartsOn, startsWithToday, excluded, weekendDays }: GetSchedulerViewDaysArgs): SchedulerViewDay[];
export interface GetEventsInPeriodArgs {
    events: CalendarSchedulerEvent[];
    periodStart: Date;
    periodEnd: Date;
}
export interface GetSchedulerEventsInPeriodArgs {
    events: SchedulerViewEvent[];
    periodStart: Date;
    periodEnd: Date;
}
