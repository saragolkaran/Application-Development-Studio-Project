import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
var moment = momentImported;
var CalendarSchedulerHourSegmentComponent = /** @class */ (function () {
    function CalendarSchedulerHourSegmentComponent() {
        this.hourSegmentHeight = 58;
        this.showHour = false;
        this.segmentClicked = new EventEmitter();
    }
    CalendarSchedulerHourSegmentComponent.prototype.ngOnInit = function () {
        this.title = this.title || moment(this.segment.date).format('dddd L, LT');
    };
    /**
     * @hidden
     */
    CalendarSchedulerHourSegmentComponent.prototype.onMouseEnter = function (mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    };
    /**
     * @hidden
     */
    CalendarSchedulerHourSegmentComponent.prototype.onMouseLeave = function (mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    };
    /**
     * @hidden
     */
    CalendarSchedulerHourSegmentComponent.prototype.onSegmentClick = function (mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0 && !segment.isDisabled && !segment.isCancelled) {
            this.segmentClicked.emit({ segment: segment });
        }
    };
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "day", void 0);
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "segment", void 0);
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "locale", void 0);
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "customTemplate", void 0);
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "hourSegmentHeight", void 0);
    tslib_1.__decorate([
        Input()
    ], CalendarSchedulerHourSegmentComponent.prototype, "showHour", void 0);
    tslib_1.__decorate([
        Output()
    ], CalendarSchedulerHourSegmentComponent.prototype, "segmentClicked", void 0);
    CalendarSchedulerHourSegmentComponent = tslib_1.__decorate([
        Component({
            selector: 'calendar-scheduler-hour-segment',
            template: "\n        <ng-template #defaultTemplate>\n            <div class=\"cal-scheduler-hour-segment\"\n                [title]=\"title\"\n                [ngClass]=\"segment?.cssClass\"\n                [class.has-events]=\"segment.events.length > 0\"\n                [class.cal-cancelled]=\"segment.isCancelled\"\n                [class.cal-disabled]=\"segment.isDisabled\"\n                [style.backgroundColor]=\"segment.backgroundColor\"\n                [style.height.px]=\"hourSegmentHeight\"\n                (mwlClick)=\"onSegmentClick($event, segment)\">\n                <div class=\"cal-scheduler-time unselectable\" *ngIf=\"showHour && segment.events.length === 0\">\n                    {{ segment.date | calendarDate:'dayViewHour':locale }}\n                </div>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n                title: title,\n                day: day,\n                segment: segment,\n                locale: locale,\n                hourSegmentHeight: hourSegmentHeight,\n                showHour: showHour,\n                segmentClicked: segmentClicked\n            }\">\n        </ng-template>\n    "
        })
    ], CalendarSchedulerHourSegmentComponent);
    return CalendarSchedulerHourSegmentComponent;
}());
export { CalendarSchedulerHourSegmentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWNhbGVuZGFyLXNjaGVkdWxlci8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2NoZWR1bGVyL2NhbGVuZGFyLXNjaGVkdWxlci1ob3VyLXNlZ21lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBTzVGLHNGQUFzRjtBQUN0RixPQUFPLEtBQUssY0FBYyxNQUFNLFFBQVEsQ0FBQztBQUN6QyxJQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7QUFrQzlCO0lBaENBO1FBMkNhLHNCQUFpQixHQUFXLEVBQUUsQ0FBQztRQUUvQixhQUFRLEdBQVksS0FBSyxDQUFDO1FBRXpCLG1CQUFjLEdBQXdELElBQUksWUFBWSxFQUF5QyxDQUFDO0lBb0M5SSxDQUFDO0lBbENHLHdEQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRDs7T0FFRztJQUNILDREQUFZLEdBQVosVUFBYSxVQUFzQixFQUFFLE9BQWlDLEVBQUUsS0FBNkI7UUFDakcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQzFDLHFCQUFxQjtTQUN4QjtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILDREQUFZLEdBQVosVUFBYSxVQUFzQixFQUFFLE9BQWlDLEVBQUUsS0FBNkI7UUFDakcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQzFDLHFCQUFxQjtTQUN4QjtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILDhEQUFjLEdBQWQsVUFBZSxVQUFzQixFQUFFLE9BQWlDO1FBQ3BFLElBQUksVUFBVSxDQUFDLGVBQWUsRUFBRTtZQUM1QixVQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7UUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQzVFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0lBakRRO1FBQVIsS0FBSyxFQUFFO3dFQUFlO0lBRWQ7UUFBUixLQUFLLEVBQUU7c0VBQXVCO0lBRXRCO1FBQVIsS0FBSyxFQUFFOzBFQUFtQztJQUVsQztRQUFSLEtBQUssRUFBRTt5RUFBZ0I7SUFFZjtRQUFSLEtBQUssRUFBRTtpRkFBa0M7SUFFakM7UUFBUixLQUFLLEVBQUU7b0ZBQWdDO0lBRS9CO1FBQVIsS0FBSyxFQUFFOzJFQUEyQjtJQUV6QjtRQUFULE1BQU0sRUFBRTtpRkFBaUk7SUFmakkscUNBQXFDO1FBaENqRCxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUNBQWlDO1lBQzNDLFFBQVEsRUFBRSxzdkNBNEJUO1NBQ0osQ0FBQztPQUNXLHFDQUFxQyxDQW1EakQ7SUFBRCw0Q0FBQztDQUFBLEFBbkRELElBbURDO1NBbkRZLHFDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBTY2hlZHVsZXJWaWV3RGF5LFxyXG4gICAgU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudFxyXG59IGZyb20gJy4vbW9kZWxzJztcclxuXHJcbi8vIFdPUktBUk9VTkQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9kaGVyZ2VzL25nLXBhY2thZ3IvaXNzdWVzLzIxNyNpc3N1ZWNvbW1lbnQtMzM5NDYwMjU1XHJcbmltcG9ydCAqIGFzIG1vbWVudEltcG9ydGVkIGZyb20gJ21vbWVudCc7XHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudEltcG9ydGVkO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2NhbGVuZGFyLXNjaGVkdWxlci1ob3VyLXNlZ21lbnQnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRUZW1wbGF0ZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhbC1zY2hlZHVsZXItaG91ci1zZWdtZW50XCJcclxuICAgICAgICAgICAgICAgIFt0aXRsZV09XCJ0aXRsZVwiXHJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJzZWdtZW50Py5jc3NDbGFzc1wiXHJcbiAgICAgICAgICAgICAgICBbY2xhc3MuaGFzLWV2ZW50c109XCJzZWdtZW50LmV2ZW50cy5sZW5ndGggPiAwXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5jYWwtY2FuY2VsbGVkXT1cInNlZ21lbnQuaXNDYW5jZWxsZWRcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmNhbC1kaXNhYmxlZF09XCJzZWdtZW50LmlzRGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgW3N0eWxlLmJhY2tncm91bmRDb2xvcl09XCJzZWdtZW50LmJhY2tncm91bmRDb2xvclwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuaGVpZ2h0LnB4XT1cImhvdXJTZWdtZW50SGVpZ2h0XCJcclxuICAgICAgICAgICAgICAgIChtd2xDbGljayk9XCJvblNlZ21lbnRDbGljaygkZXZlbnQsIHNlZ21lbnQpXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsLXNjaGVkdWxlci10aW1lIHVuc2VsZWN0YWJsZVwiICpuZ0lmPVwic2hvd0hvdXIgJiYgc2VnbWVudC5ldmVudHMubGVuZ3RoID09PSAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3sgc2VnbWVudC5kYXRlIHwgY2FsZW5kYXJEYXRlOidkYXlWaWV3SG91cic6bG9jYWxlIH19XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICA8bmctdGVtcGxhdGVcclxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRdPVwiY3VzdG9tVGVtcGxhdGUgfHwgZGVmYXVsdFRlbXBsYXRlXCJcclxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgIGRheTogZGF5LFxyXG4gICAgICAgICAgICAgICAgc2VnbWVudDogc2VnbWVudCxcclxuICAgICAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLFxyXG4gICAgICAgICAgICAgICAgaG91clNlZ21lbnRIZWlnaHQ6IGhvdXJTZWdtZW50SGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgc2hvd0hvdXI6IHNob3dIb3VyLFxyXG4gICAgICAgICAgICAgICAgc2VnbWVudENsaWNrZWQ6IHNlZ21lbnRDbGlja2VkXHJcbiAgICAgICAgICAgIH1cIj5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTY2hlZHVsZXJIb3VyU2VnbWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIGRheTogU2NoZWR1bGVyVmlld0RheTtcclxuXHJcbiAgICBASW5wdXQoKSBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQ7XHJcblxyXG4gICAgQElucHV0KCkgbG9jYWxlOiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgY3VzdG9tVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gICAgQElucHV0KCkgaG91clNlZ21lbnRIZWlnaHQ6IG51bWJlciA9IDU4O1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dIb3VyOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgQE91dHB1dCgpIHNlZ21lbnRDbGlja2VkOiBFdmVudEVtaXR0ZXI8eyBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQgfT4gPSBuZXcgRXZlbnRFbWl0dGVyPHsgc2VnbWVudDogU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50IH0+KCk7XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMudGl0bGUgfHwgbW9tZW50KHRoaXMuc2VnbWVudC5kYXRlKS5mb3JtYXQoJ2RkZGQgTCwgTFQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgb25Nb3VzZUVudGVyKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQsIHNlZ21lbnQ6IFNjaGVkdWxlclZpZXdIb3VyU2VnbWVudCwgZXZlbnQ6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWV2ZW50LmlzRGlzYWJsZWQgJiYgIXNlZ21lbnQuaXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAvLyBNYXliZSBkbyBzb21ldGhpbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIG9uTW91c2VMZWF2ZShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQsIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFldmVudC5pc0Rpc2FibGVkICYmICFzZWdtZW50LmlzRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgLy8gTWF5YmUgZG8gc29tZXRoaW5nXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBvblNlZ21lbnRDbGljayhtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAobW91c2VFdmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgbW91c2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZWdtZW50LmV2ZW50cy5sZW5ndGggPT09IDAgJiYgIXNlZ21lbnQuaXNEaXNhYmxlZCAmJiAhc2VnbWVudC5pc0NhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRDbGlja2VkLmVtaXQoeyBzZWdtZW50OiBzZWdtZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=