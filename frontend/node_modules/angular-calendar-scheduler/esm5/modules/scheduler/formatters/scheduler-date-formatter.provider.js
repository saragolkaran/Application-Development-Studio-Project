import * as tslib_1 from "tslib";
import { CalendarDateFormatter } from 'angular-calendar';
import { DAYS_IN_WEEK } from '../utils/calendar-scheduler-utils';
var SchedulerDateFormatter = /** @class */ (function (_super) {
    tslib_1.__extends(SchedulerDateFormatter, _super);
    function SchedulerDateFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The time formatting down the left hand side of the day view
     */
    SchedulerDateFormatter.prototype.dayViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { hour: 'numeric', minute: 'numeric' }).format(date);
    };
    SchedulerDateFormatter.prototype.weekViewTitle = function (_a) {
        var dateAdapter = _a.dateAdapter, date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek, startsWithToday = _a.startsWithToday;
        // http://generatedcontent.org/post/59403168016/esintlapi
        var year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
        var month = new Intl.DateTimeFormat(locale, { month: 'short' }).format(date);
        var dateInner = startsWithToday || daysInWeek < DAYS_IN_WEEK
            ? date
            : dateAdapter.startOfWeek(date, { weekStartsOn: weekStartsOn });
        // var firstDay: number = date.getDate() - date.getDay() + 1; // First day is the day of the month - the day of the week
        var firstDay = dateInner.getDate();
        while (excludeDays.includes(firstDay)) {
            firstDay += 1;
        }
        var lastDay = firstDay + (daysInWeek - 1); // last day is the first day + (daysInWeek - 1)
        while (excludeDays.includes(lastDay)) {
            lastDay += 1;
        }
        var firstDayMonth = month;
        var lastDayMonth = month;
        var firstDayYear = year;
        var lastDayYear = year;
        if (firstDay < 1) {
            var prevMonthDate = new Date(dateInner.getFullYear(), dateInner.getMonth() - 1);
            firstDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(prevMonthDate);
            var daysInPrevMonth = this.daysInMonth(prevMonthDate);
            var i = 0;
            var prevMonthDay = daysInPrevMonth;
            for (i = 0; i < Math.abs(firstDay); i++) {
                prevMonthDay--;
            }
            firstDay = prevMonthDay;
            var prevMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(prevMonthDate);
            if (Number(prevMonthYear) < Number(year)) {
                firstDayYear = prevMonthYear;
            }
        }
        var daysInMonth = this.daysInMonth(dateInner);
        if (lastDay > daysInMonth) {
            var nextMonthDate = new Date(dateInner.getFullYear(), dateInner.getMonth() + 1);
            lastDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(nextMonthDate);
            var i = 0;
            var nextMonthDay = 0;
            for (i = 0; i < (lastDay - daysInMonth); i++) {
                nextMonthDay++;
            }
            lastDay = nextMonthDay;
            var nextMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(nextMonthDate);
            if (Number(nextMonthYear) > Number(year)) {
                lastDayYear = nextMonthYear;
            }
        }
        return "" + firstDay + (firstDayMonth !== lastDayMonth || lastDay === firstDay ? ' ' + firstDayMonth : '') +
            (firstDayYear !== lastDayYear ? ' ' + firstDayYear : '') +
            (lastDay === firstDay ? '' : " - " + lastDay + " " + lastDayMonth + " " + lastDayYear);
    };
    SchedulerDateFormatter.prototype.daysInMonth = function (anyDateInMonth) {
        return new Date(anyDateInMonth.getFullYear(), anyDateInMonth.getMonth() + 1, 0).getDate();
    };
    return SchedulerDateFormatter;
}(CalendarDateFormatter));
export { SchedulerDateFormatter };
//# sourceMappingURL=data:application/json;base64,