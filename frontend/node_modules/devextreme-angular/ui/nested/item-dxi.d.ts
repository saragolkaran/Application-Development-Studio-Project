/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, Renderer2, AfterViewInit, QueryList } from '@angular/core';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { DxiButtonGroupItem } from './base/button-group-item-dxi';
import { DxiValidationRuleComponent } from './validation-rule-dxi';
import { DxiTabComponent } from './tab-dxi';
import { DxiLocationComponent } from './location-dxi';
import * as ɵngcc0 from '@angular/core';
export declare class DxiItemComponent extends DxiButtonGroupItem implements AfterViewInit, IDxTemplateHost {
    private renderer;
    private document;
    private element;
    protected readonly _optionPath: string;
    itemsChildren: QueryList<DxiItemComponent>;
    validationRulesChildren: QueryList<DxiValidationRuleComponent>;
    tabsChildren: QueryList<DxiTabComponent>;
    locationChildren: QueryList<DxiLocationComponent>;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxiItemComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxiItemComponent, "dxi-item", never, { "disabled": "disabled"; "html": "html"; "icon": "icon"; "template": "template"; "text": "text"; "title": "title"; "visible": "visible"; "onClick": "onClick"; "type": "type"; "baseSize": "baseSize"; "box": "box"; "ratio": "ratio"; "shrink": "shrink"; "hint": "hint"; "beginGroup": "beginGroup"; "closeMenuOnClick": "closeMenuOnClick"; "items": "items"; "selectable": "selectable"; "selected": "selected"; "colSpan": "colSpan"; "cssClass": "cssClass"; "dataField": "dataField"; "editorOptions": "editorOptions"; "editorType": "editorType"; "helpText": "helpText"; "isRequired": "isRequired"; "itemType": "itemType"; "label": "label"; "name": "name"; "validationRules": "validationRules"; "visibleIndex": "visibleIndex"; "alignItemLabels": "alignItemLabels"; "caption": "caption"; "colCount": "colCount"; "colCountByScreen": "colCountByScreen"; "tabPanelOptions": "tabPanelOptions"; "tabs": "tabs"; "badge": "badge"; "tabTemplate": "tabTemplate"; "alignment": "alignment"; "buttonOptions": "buttonOptions"; "horizontalAlignment": "horizontalAlignment"; "verticalAlignment": "verticalAlignment"; "height": "height"; "width": "width"; "locateInMenu": "locateInMenu"; "location": "location"; "menuItemTemplate": "menuItemTemplate"; "options": "options"; "showText": "showText"; "widget": "widget"; "imageAlt": "imageAlt"; "imageSrc": "imageSrc"; "formatName": "formatName"; "formatValues": "formatValues"; "key": "key"; "showChevron": "showChevron"; "menuTemplate": "menuTemplate"; "heightRatio": "heightRatio"; "widthRatio": "widthRatio"; "expanded": "expanded"; "hasItems": "hasItems"; "parentId": "parentId"; }, {}, ["itemsChildren", "validationRulesChildren", "tabsChildren", "locationChildren"], ["*"]>;
}
export declare class DxiItemModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxiItemModule, [typeof DxiItemComponent], never, [typeof DxiItemComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxiItemModule>;
}

//# sourceMappingURL=item-dxi.d.ts.map