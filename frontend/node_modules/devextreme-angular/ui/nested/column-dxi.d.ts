/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { EventEmitter, QueryList } from '@angular/core';
import { NestedOptionHost } from 'devextreme-angular/core';
import { DxiDataGridColumn } from './base/data-grid-column-dxi';
import { DxiButtonComponent } from './button-dxi';
import { DxiValidationRuleComponent } from './validation-rule-dxi';
import * as ɵngcc0 from '@angular/core';
export declare class DxiColumnComponent extends DxiDataGridColumn {
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    filterValueChange: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    filterValuesChange: EventEmitter<Array<any>>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    groupIndexChange: EventEmitter<number>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    selectedFilterOperationChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    sortIndexChange: EventEmitter<number>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    sortOrderChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    visibleChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    visibleIndexChange: EventEmitter<number>;
    protected readonly _optionPath: string;
    buttonsChildren: QueryList<DxiButtonComponent>;
    columnsChildren: QueryList<DxiColumnComponent>;
    validationRulesChildren: QueryList<DxiValidationRuleComponent>;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxiColumnComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxiColumnComponent, "dxi-column", never, { "alignment": "alignment"; "allowEditing": "allowEditing"; "allowExporting": "allowExporting"; "allowFiltering": "allowFiltering"; "allowFixing": "allowFixing"; "allowGrouping": "allowGrouping"; "allowHeaderFiltering": "allowHeaderFiltering"; "allowHiding": "allowHiding"; "allowReordering": "allowReordering"; "allowResizing": "allowResizing"; "allowSearch": "allowSearch"; "allowSorting": "allowSorting"; "autoExpandGroup": "autoExpandGroup"; "buttons": "buttons"; "calculateCellValue": "calculateCellValue"; "calculateDisplayValue": "calculateDisplayValue"; "calculateFilterExpression": "calculateFilterExpression"; "calculateGroupValue": "calculateGroupValue"; "calculateSortValue": "calculateSortValue"; "caption": "caption"; "cellTemplate": "cellTemplate"; "columns": "columns"; "cssClass": "cssClass"; "customizeText": "customizeText"; "dataField": "dataField"; "dataType": "dataType"; "editCellTemplate": "editCellTemplate"; "editorOptions": "editorOptions"; "encodeHtml": "encodeHtml"; "falseText": "falseText"; "filterOperations": "filterOperations"; "filterType": "filterType"; "filterValue": "filterValue"; "filterValues": "filterValues"; "fixed": "fixed"; "fixedPosition": "fixedPosition"; "format": "format"; "formItem": "formItem"; "groupCellTemplate": "groupCellTemplate"; "groupIndex": "groupIndex"; "headerCellTemplate": "headerCellTemplate"; "headerFilter": "headerFilter"; "hidingPriority": "hidingPriority"; "isBand": "isBand"; "lookup": "lookup"; "minWidth": "minWidth"; "name": "name"; "ownerBand": "ownerBand"; "renderAsync": "renderAsync"; "selectedFilterOperation": "selectedFilterOperation"; "setCellValue": "setCellValue"; "showEditorAlways": "showEditorAlways"; "showInColumnChooser": "showInColumnChooser"; "showWhenGrouped": "showWhenGrouped"; "sortIndex": "sortIndex"; "sortingMethod": "sortingMethod"; "sortOrder": "sortOrder"; "trueText": "trueText"; "type": "type"; "validationRules": "validationRules"; "visible": "visible"; "visibleIndex": "visibleIndex"; "width": "width"; }, { "filterValueChange": "filterValueChange"; "filterValuesChange": "filterValuesChange"; "groupIndexChange": "groupIndexChange"; "selectedFilterOperationChange": "selectedFilterOperationChange"; "sortIndexChange": "sortIndexChange"; "sortOrderChange": "sortOrderChange"; "visibleChange": "visibleChange"; "visibleIndexChange": "visibleIndexChange"; }, ["buttonsChildren", "columnsChildren", "validationRulesChildren"], never>;
}
export declare class DxiColumnModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxiColumnModule, [typeof DxiColumnComponent], never, [typeof DxiColumnComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxiColumnModule>;
}

//# sourceMappingURL=column-dxi.d.ts.map